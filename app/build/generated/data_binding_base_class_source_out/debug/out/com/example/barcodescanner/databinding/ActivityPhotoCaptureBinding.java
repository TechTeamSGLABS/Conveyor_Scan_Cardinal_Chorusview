// Generated by view binder compiler. Do not edit!
package com.example.barcodescanner.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.camera.view.PreviewView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.barcodescanner.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityPhotoCaptureBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final Button backButton;

  @NonNull
  public final Button captureButton;

  @NonNull
  public final ImageView capturedImageView;

  @NonNull
  public final LinearLayout controlPanel;

  @NonNull
  public final Button focusButton;

  @NonNull
  public final PreviewView previewView;

  @NonNull
  public final Button readBarcodesButton;

  @NonNull
  public final Button resolutionButton;

  @NonNull
  public final LinearLayout zoomControls;

  @NonNull
  public final Button zoomInButton;

  @NonNull
  public final TextView zoomLevelText;

  @NonNull
  public final Button zoomOutButton;

  @NonNull
  public final Button zoomResetButton;

  private ActivityPhotoCaptureBinding(@NonNull RelativeLayout rootView, @NonNull Button backButton,
      @NonNull Button captureButton, @NonNull ImageView capturedImageView,
      @NonNull LinearLayout controlPanel, @NonNull Button focusButton,
      @NonNull PreviewView previewView, @NonNull Button readBarcodesButton,
      @NonNull Button resolutionButton, @NonNull LinearLayout zoomControls,
      @NonNull Button zoomInButton, @NonNull TextView zoomLevelText, @NonNull Button zoomOutButton,
      @NonNull Button zoomResetButton) {
    this.rootView = rootView;
    this.backButton = backButton;
    this.captureButton = captureButton;
    this.capturedImageView = capturedImageView;
    this.controlPanel = controlPanel;
    this.focusButton = focusButton;
    this.previewView = previewView;
    this.readBarcodesButton = readBarcodesButton;
    this.resolutionButton = resolutionButton;
    this.zoomControls = zoomControls;
    this.zoomInButton = zoomInButton;
    this.zoomLevelText = zoomLevelText;
    this.zoomOutButton = zoomOutButton;
    this.zoomResetButton = zoomResetButton;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityPhotoCaptureBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityPhotoCaptureBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_photo_capture, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityPhotoCaptureBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.backButton;
      Button backButton = ViewBindings.findChildViewById(rootView, id);
      if (backButton == null) {
        break missingId;
      }

      id = R.id.captureButton;
      Button captureButton = ViewBindings.findChildViewById(rootView, id);
      if (captureButton == null) {
        break missingId;
      }

      id = R.id.capturedImageView;
      ImageView capturedImageView = ViewBindings.findChildViewById(rootView, id);
      if (capturedImageView == null) {
        break missingId;
      }

      id = R.id.controlPanel;
      LinearLayout controlPanel = ViewBindings.findChildViewById(rootView, id);
      if (controlPanel == null) {
        break missingId;
      }

      id = R.id.focusButton;
      Button focusButton = ViewBindings.findChildViewById(rootView, id);
      if (focusButton == null) {
        break missingId;
      }

      id = R.id.previewView;
      PreviewView previewView = ViewBindings.findChildViewById(rootView, id);
      if (previewView == null) {
        break missingId;
      }

      id = R.id.readBarcodesButton;
      Button readBarcodesButton = ViewBindings.findChildViewById(rootView, id);
      if (readBarcodesButton == null) {
        break missingId;
      }

      id = R.id.resolutionButton;
      Button resolutionButton = ViewBindings.findChildViewById(rootView, id);
      if (resolutionButton == null) {
        break missingId;
      }

      id = R.id.zoomControls;
      LinearLayout zoomControls = ViewBindings.findChildViewById(rootView, id);
      if (zoomControls == null) {
        break missingId;
      }

      id = R.id.zoomInButton;
      Button zoomInButton = ViewBindings.findChildViewById(rootView, id);
      if (zoomInButton == null) {
        break missingId;
      }

      id = R.id.zoomLevelText;
      TextView zoomLevelText = ViewBindings.findChildViewById(rootView, id);
      if (zoomLevelText == null) {
        break missingId;
      }

      id = R.id.zoomOutButton;
      Button zoomOutButton = ViewBindings.findChildViewById(rootView, id);
      if (zoomOutButton == null) {
        break missingId;
      }

      id = R.id.zoomResetButton;
      Button zoomResetButton = ViewBindings.findChildViewById(rootView, id);
      if (zoomResetButton == null) {
        break missingId;
      }

      return new ActivityPhotoCaptureBinding((RelativeLayout) rootView, backButton, captureButton,
          capturedImageView, controlPanel, focusButton, previewView, readBarcodesButton,
          resolutionButton, zoomControls, zoomInButton, zoomLevelText, zoomOutButton,
          zoomResetButton);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
