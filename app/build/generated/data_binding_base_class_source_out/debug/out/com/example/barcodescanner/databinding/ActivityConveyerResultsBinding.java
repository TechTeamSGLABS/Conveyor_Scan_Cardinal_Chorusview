// Generated by view binder compiler. Do not edit!
package com.example.barcodescanner.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ScrollView;
import android.widget.Switch;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.barcodescanner.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityConveyerResultsBinding implements ViewBinding {
  @NonNull
  private final ScrollView rootView;

  @NonNull
  public final TextView allSessionsTitleTextView;

  @NonNull
  public final RecyclerView associationsRecyclerView;

  @NonNull
  public final Button backToScannerButton;

  @NonNull
  public final Button clearDataButton;

  @NonNull
  public final CardView currentSessionCard;

  @NonNull
  public final TextView currentSessionStatsTextView;

  @NonNull
  public final TextView currentSessionTitleTextView;

  @NonNull
  public final Button doneButton;

  @NonNull
  public final Button forceSyncButton;

  @NonNull
  public final TextView syncStatusTextView;

  @NonNull
  public final TextView viewModeLabel;

  @NonNull
  public final Switch viewModeSwitch;

  private ActivityConveyerResultsBinding(@NonNull ScrollView rootView,
      @NonNull TextView allSessionsTitleTextView, @NonNull RecyclerView associationsRecyclerView,
      @NonNull Button backToScannerButton, @NonNull Button clearDataButton,
      @NonNull CardView currentSessionCard, @NonNull TextView currentSessionStatsTextView,
      @NonNull TextView currentSessionTitleTextView, @NonNull Button doneButton,
      @NonNull Button forceSyncButton, @NonNull TextView syncStatusTextView,
      @NonNull TextView viewModeLabel, @NonNull Switch viewModeSwitch) {
    this.rootView = rootView;
    this.allSessionsTitleTextView = allSessionsTitleTextView;
    this.associationsRecyclerView = associationsRecyclerView;
    this.backToScannerButton = backToScannerButton;
    this.clearDataButton = clearDataButton;
    this.currentSessionCard = currentSessionCard;
    this.currentSessionStatsTextView = currentSessionStatsTextView;
    this.currentSessionTitleTextView = currentSessionTitleTextView;
    this.doneButton = doneButton;
    this.forceSyncButton = forceSyncButton;
    this.syncStatusTextView = syncStatusTextView;
    this.viewModeLabel = viewModeLabel;
    this.viewModeSwitch = viewModeSwitch;
  }

  @Override
  @NonNull
  public ScrollView getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityConveyerResultsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityConveyerResultsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_conveyer_results, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityConveyerResultsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.allSessionsTitleTextView;
      TextView allSessionsTitleTextView = ViewBindings.findChildViewById(rootView, id);
      if (allSessionsTitleTextView == null) {
        break missingId;
      }

      id = R.id.associationsRecyclerView;
      RecyclerView associationsRecyclerView = ViewBindings.findChildViewById(rootView, id);
      if (associationsRecyclerView == null) {
        break missingId;
      }

      id = R.id.backToScannerButton;
      Button backToScannerButton = ViewBindings.findChildViewById(rootView, id);
      if (backToScannerButton == null) {
        break missingId;
      }

      id = R.id.clearDataButton;
      Button clearDataButton = ViewBindings.findChildViewById(rootView, id);
      if (clearDataButton == null) {
        break missingId;
      }

      id = R.id.currentSessionCard;
      CardView currentSessionCard = ViewBindings.findChildViewById(rootView, id);
      if (currentSessionCard == null) {
        break missingId;
      }

      id = R.id.currentSessionStatsTextView;
      TextView currentSessionStatsTextView = ViewBindings.findChildViewById(rootView, id);
      if (currentSessionStatsTextView == null) {
        break missingId;
      }

      id = R.id.currentSessionTitleTextView;
      TextView currentSessionTitleTextView = ViewBindings.findChildViewById(rootView, id);
      if (currentSessionTitleTextView == null) {
        break missingId;
      }

      id = R.id.doneButton;
      Button doneButton = ViewBindings.findChildViewById(rootView, id);
      if (doneButton == null) {
        break missingId;
      }

      id = R.id.forceSyncButton;
      Button forceSyncButton = ViewBindings.findChildViewById(rootView, id);
      if (forceSyncButton == null) {
        break missingId;
      }

      id = R.id.syncStatusTextView;
      TextView syncStatusTextView = ViewBindings.findChildViewById(rootView, id);
      if (syncStatusTextView == null) {
        break missingId;
      }

      id = R.id.viewModeLabel;
      TextView viewModeLabel = ViewBindings.findChildViewById(rootView, id);
      if (viewModeLabel == null) {
        break missingId;
      }

      id = R.id.viewModeSwitch;
      Switch viewModeSwitch = ViewBindings.findChildViewById(rootView, id);
      if (viewModeSwitch == null) {
        break missingId;
      }

      return new ActivityConveyerResultsBinding((ScrollView) rootView, allSessionsTitleTextView,
          associationsRecyclerView, backToScannerButton, clearDataButton, currentSessionCard,
          currentSessionStatsTextView, currentSessionTitleTextView, doneButton, forceSyncButton,
          syncStatusTextView, viewModeLabel, viewModeSwitch);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
